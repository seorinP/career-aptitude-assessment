{"ast":null,"code":"'use strict'; // A JongseongCode is an integer[0...27].\n//   - Each code represents a tail consonants.\n//     code  |  e.g.\n//    -------+------\n//       0   |   가\n//       1   |   각\n//       2   |   갂\n//       3   |   갃\n//       4   |   간\n//       5   |   갅\n//       6   |   갆\n//       7   |   갇\n//       8   |   갈\n//       9   |   갉\n//      10   |   갊\n//      11   |   갋\n//      12   |   갌\n//      13   |   갍\n//      14   |   갎\n//      15   |   갏\n//      16   |   감\n//      17   |   갑\n//      18   |   값\n//      19   |   갓\n//      20   |   갔\n//      21   |   강\n//      22   |   갖\n//      23   |   갗\n//      24   |   갘\n//      25   |   같\n//      26   |   갚\n//      27   |   갛\n// _codeForHangul :: string -> JongseongCode\n// Given a Hangul letter, computes its jongseong code.\n// Assume h is a single letter Hangul string (가-힣).\n//   - 44032 (AC00) is the code point of 가, which is the first Hangul letter.\n//   - 28 = the number of the jongseongs + 1\n\nvar _codeForHangul = function _codeForHangul(h) {\n  return (h.charCodeAt(0) - 44032) % 28;\n}; // code :: string -> JongseongCode\n// Given a string of zeros, returns its jongseong code.\n// e.g. _codeForZeros('00') === 1    (100 = 백)\n//   the number |\n//   of zeros   |\n//   -----------+-------\n//       1      |  십\n//       2      |  백\n//       3      |  천\n//     4 ~ 7    |  만\n//     8 ~ 11   |  억\n//    12 ~ 15   |  조\n//    16 ~ 19   |  경\n//    20 ~ 23   |  해\n\n\nvar _codeForZeros = function _codeForZeros(zs) {\n  var n = zs.length;\n\n  if (n === 1) {\n    return 17;\n  }\n\n  if (n === 2 || n >= 8 && n <= 11) {\n    return 1;\n  }\n\n  if (n >= 3 && n <= 7) {\n    return 4;\n  }\n\n  if (n >= 12 && n <= 15 || n >= 20 && n <= 23) {\n    return 0;\n  }\n\n  if (n >= 16 && n <= 19) {\n    return 21;\n  }\n\n  throw new Error(\"It's too large.\");\n}; // _codeForDigit :: string -> JongseongCode\n// Given a digit, returns its jongseong code.\n// Assume d is one of: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\n\n\nvar _codeForDigit = function _codeForDigit(d) {\n  return [21, 8, 0, 16, 0, 0, 1, 8, 8, 0][d];\n}; // _codeForEnglish :: string -> JongseongCode\n// Given a two-letter English string, returns its jongseong code.\n// Assume e is a two-letter English string.\n\n\nvar _codeForEnglish = function _codeForEnglish(e) {\n  return /ck/i.test(e) ? 1 : /.n/i.test(e) ? 4 : /ne/i.test(e) ? 4 : /.l/i.test(e) ? 8 : /le/i.test(e) ? 8 : /.m/i.test(e) ? 16 : /ob/i.test(e) ? 17 : /.p/i.test(e) ? 17 : /et/i.test(e) ? 19 : /ng/i.test(e) ? 21 :\n  /* else      */\n  0;\n}; // _codeForEnglishInitial :: string -> JongseongCode\n// Given an English letter, returns its jongseong code.\n// Assume e is a single-letter English string.\n\n\nvar _codeForEnglishInitial = function _codeForEnglishInitial(e) {\n  switch (e.toLowerCase()) {\n    case 'l':\n    case 'r':\n      return 8;\n\n    case 'm':\n      return 16;\n\n    case 'n':\n      return 4;\n\n    default:\n      return 0;\n  }\n}; // code :: string -> JongseongCode\n// Computes the jongseong code of a given string.\n// If there isn't any recognizable letter in word, returns 0 (no jongseong).\n\n\nvar code = function code(word) {\n  if (!word) {\n    return 0;\n  } // !!! Ignore letters inside parentheses.\n\n\n  var w = word.replace(/\\([^)]*\\)$/, '');\n  var last = w[w.length - 1];\n\n  if (/[가-힣]/.test(last)) {\n    return _codeForHangul(last);\n  }\n\n  if (/[1-9]0+$/.test(w)) {\n    var zerosMatch = /0+$/.exec(w);\n    return _codeForZeros(zerosMatch[0]);\n  }\n\n  if (/\\d/.test(last)) {\n    return _codeForDigit(last);\n  }\n\n  if (/[a-z]{2}$/i.test(w)) {\n    return _codeForEnglish(w.slice(w.length - 2, w.length));\n  }\n\n  if (/(?:^|[^a-z])[a-z]$/i.test(w)) {\n    return _codeForEnglishInitial(last);\n  }\n\n  if (/(^|[^a-z])[a-z][^a-z]?$/i.test(w)) {\n    return _codeForEnglishInitial(w[w.length - 2]);\n  }\n\n  return code(w.slice(0, w.length - 1));\n}; // hasJongseong :: string -> boolean\n// Does the last letter of a given word have a jongseong?\n\n\nvar hasJongseong = function hasJongseong(w) {\n  return code(w) !== 0;\n};\n\nmodule.exports = {\n  _codeForHangul: _codeForHangul,\n  _codeForZeros: _codeForZeros,\n  _codeForDigit: _codeForDigit,\n  _codeForEnglish: _codeForEnglish,\n  _codeForEnglishInitial: _codeForEnglishInitial,\n  code: code,\n  hasJongseong: hasJongseong\n};","map":{"version":3,"sources":["C:/study/elice-career-test-master/elice-career-test-master/node_modules/jongseong/dist/index.js"],"names":["_codeForHangul","h","charCodeAt","_codeForZeros","zs","n","length","Error","_codeForDigit","d","_codeForEnglish","e","test","_codeForEnglishInitial","toLowerCase","code","word","w","replace","last","zerosMatch","exec","slice","hasJongseong","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// A JongseongCode is an integer[0...27].\n//   - Each code represents a tail consonants.\n//     code  |  e.g.\n//    -------+------\n//       0   |   가\n//       1   |   각\n//       2   |   갂\n//       3   |   갃\n//       4   |   간\n//       5   |   갅\n//       6   |   갆\n//       7   |   갇\n//       8   |   갈\n//       9   |   갉\n//      10   |   갊\n//      11   |   갋\n//      12   |   갌\n//      13   |   갍\n//      14   |   갎\n//      15   |   갏\n//      16   |   감\n//      17   |   갑\n//      18   |   값\n//      19   |   갓\n//      20   |   갔\n//      21   |   강\n//      22   |   갖\n//      23   |   갗\n//      24   |   갘\n//      25   |   같\n//      26   |   갚\n//      27   |   갛\n\n// _codeForHangul :: string -> JongseongCode\n// Given a Hangul letter, computes its jongseong code.\n// Assume h is a single letter Hangul string (가-힣).\n//   - 44032 (AC00) is the code point of 가, which is the first Hangul letter.\n//   - 28 = the number of the jongseongs + 1\nvar _codeForHangul = function _codeForHangul(h) {\n  return (h.charCodeAt(0) - 44032) % 28;\n};\n\n// code :: string -> JongseongCode\n// Given a string of zeros, returns its jongseong code.\n// e.g. _codeForZeros('00') === 1    (100 = 백)\n//   the number |\n//   of zeros   |\n//   -----------+-------\n//       1      |  십\n//       2      |  백\n//       3      |  천\n//     4 ~ 7    |  만\n//     8 ~ 11   |  억\n//    12 ~ 15   |  조\n//    16 ~ 19   |  경\n//    20 ~ 23   |  해\nvar _codeForZeros = function _codeForZeros(zs) {\n  var n = zs.length;\n\n  if (n === 1) {\n    return 17;\n  }\n  if (n === 2 || n >= 8 && n <= 11) {\n    return 1;\n  }\n  if (n >= 3 && n <= 7) {\n    return 4;\n  }\n  if (n >= 12 && n <= 15 || n >= 20 && n <= 23) {\n    return 0;\n  }\n  if (n >= 16 && n <= 19) {\n    return 21;\n  }\n\n  throw new Error(\"It's too large.\");\n};\n\n// _codeForDigit :: string -> JongseongCode\n// Given a digit, returns its jongseong code.\n// Assume d is one of: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\nvar _codeForDigit = function _codeForDigit(d) {\n  return [21, 8, 0, 16, 0, 0, 1, 8, 8, 0][d];\n};\n\n// _codeForEnglish :: string -> JongseongCode\n// Given a two-letter English string, returns its jongseong code.\n// Assume e is a two-letter English string.\nvar _codeForEnglish = function _codeForEnglish(e) {\n  return (/ck/i.test(e) ? 1 : /.n/i.test(e) ? 4 : /ne/i.test(e) ? 4 : /.l/i.test(e) ? 8 : /le/i.test(e) ? 8 : /.m/i.test(e) ? 16 : /ob/i.test(e) ? 17 : /.p/i.test(e) ? 17 : /et/i.test(e) ? 19 : /ng/i.test(e) ? 21 : /* else      */0\n  );\n};\n\n// _codeForEnglishInitial :: string -> JongseongCode\n// Given an English letter, returns its jongseong code.\n// Assume e is a single-letter English string.\nvar _codeForEnglishInitial = function _codeForEnglishInitial(e) {\n  switch (e.toLowerCase()) {\n    case 'l':\n    case 'r':\n      return 8;\n    case 'm':\n      return 16;\n    case 'n':\n      return 4;\n    default:\n      return 0;\n  }\n};\n\n// code :: string -> JongseongCode\n// Computes the jongseong code of a given string.\n// If there isn't any recognizable letter in word, returns 0 (no jongseong).\nvar code = function code(word) {\n  if (!word) {\n    return 0;\n  }\n\n  // !!! Ignore letters inside parentheses.\n  var w = word.replace(/\\([^)]*\\)$/, '');\n  var last = w[w.length - 1];\n\n  if (/[가-힣]/.test(last)) {\n    return _codeForHangul(last);\n  }\n\n  if (/[1-9]0+$/.test(w)) {\n    var zerosMatch = /0+$/.exec(w);\n\n    return _codeForZeros(zerosMatch[0]);\n  }\n\n  if (/\\d/.test(last)) {\n    return _codeForDigit(last);\n  }\n\n  if (/[a-z]{2}$/i.test(w)) {\n    return _codeForEnglish(w.slice(w.length - 2, w.length));\n  }\n\n  if (/(?:^|[^a-z])[a-z]$/i.test(w)) {\n    return _codeForEnglishInitial(last);\n  }\n\n  if (/(^|[^a-z])[a-z][^a-z]?$/i.test(w)) {\n    return _codeForEnglishInitial(w[w.length - 2]);\n  }\n\n  return code(w.slice(0, w.length - 1));\n};\n\n// hasJongseong :: string -> boolean\n// Does the last letter of a given word have a jongseong?\nvar hasJongseong = function hasJongseong(w) {\n  return code(w) !== 0;\n};\n\nmodule.exports = {\n  _codeForHangul: _codeForHangul,\n  _codeForZeros: _codeForZeros,\n  _codeForDigit: _codeForDigit,\n  _codeForEnglish: _codeForEnglish,\n  _codeForEnglishInitial: _codeForEnglishInitial,\n  code: code,\n  hasJongseong: hasJongseong\n};"]},"metadata":{},"sourceType":"script"}